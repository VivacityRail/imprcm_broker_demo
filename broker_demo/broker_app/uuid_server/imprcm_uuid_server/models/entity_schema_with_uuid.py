# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from imprcm_uuid_server.models.base_model_ import Model
from imprcm_uuid_server.models.entity_schema_no_uuid import EntitySchemaNoUuid  # noqa: F401,E501
from imprcm_uuid_server.models.uuid import Uuid  # noqa: F401,E501
from imprcm_uuid_server import util


class EntitySchemaWithUuid(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: Uuid=None, entity_detail: EntitySchemaNoUuid=None):  # noqa: E501
        """EntitySchemaWithUuid - a model defined in Swagger

        :param uuid: The uuid of this EntitySchemaWithUuid.  # noqa: E501
        :type uuid: Uuid
        :param entity_detail: The entity_detail of this EntitySchemaWithUuid.  # noqa: E501
        :type entity_detail: EntitySchemaNoUuid
        """
        self.swagger_types = {
            'uuid': Uuid,
            'entity_detail': EntitySchemaNoUuid
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'entity_detail': 'entity_detail'
        }

        self._uuid = uuid
        self._entity_detail = entity_detail

    @classmethod
    def from_dict(cls, dikt) -> 'EntitySchemaWithUuid':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The entity_schema_with_uuid of this EntitySchemaWithUuid.  # noqa: E501
        :rtype: EntitySchemaWithUuid
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> Uuid:
        """Gets the uuid of this EntitySchemaWithUuid.


        :return: The uuid of this EntitySchemaWithUuid.
        :rtype: Uuid
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: Uuid):
        """Sets the uuid of this EntitySchemaWithUuid.


        :param uuid: The uuid of this EntitySchemaWithUuid.
        :type uuid: Uuid
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def entity_detail(self) -> EntitySchemaNoUuid:
        """Gets the entity_detail of this EntitySchemaWithUuid.


        :return: The entity_detail of this EntitySchemaWithUuid.
        :rtype: EntitySchemaNoUuid
        """
        return self._entity_detail

    @entity_detail.setter
    def entity_detail(self, entity_detail: EntitySchemaNoUuid):
        """Sets the entity_detail of this EntitySchemaWithUuid.


        :param entity_detail: The entity_detail of this EntitySchemaWithUuid.
        :type entity_detail: EntitySchemaNoUuid
        """

        self._entity_detail = entity_detail
