# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from imprcm_uuid_server.models.base_model_ import Model
from imprcm_uuid_server import util


class EntitySchemaNoUuid(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name_url: str=None, scheme_url: str=None, fromtimestamp: str=None, totimestamp: str=None):  # noqa: E501
        """EntitySchemaNoUuid - a model defined in Swagger

        :param entity: The entity of this EntitySchemaNoUuid.  # noqa: E501
        :type entity: str
        :param scheme: The scheme of this EntitySchemaNoUuid.  # noqa: E501
        :type scheme: str
        :param fromtimestamp: The fromtimestamp of this EntitySchemaNoUuid.  # noqa: E501
        :type fromtimestamp: str
        :param totimestamp: The totimestamp of this EntitySchemaNoUuid.  # noqa: E501
        :type totimestamp: str
        """
        self.swagger_types = {
            'name_url': str,
            'scheme_url': str,
            'fromtimestamp': str,
            'totimestamp': str
        }

        self.attribute_map = {
            'name_url': 'name_url',
            'scheme_url': 'scheme_url',
            'fromtimestamp': 'fromtimestamp',
            'totimestamp': 'totimestamp'
        }

        self._name_url = name_url
        self._scheme_url = scheme_url
        self._fromtimestamp = fromtimestamp
        self._totimestamp = totimestamp

    @classmethod
    def from_dict(cls, dikt) -> 'EntitySchemaNoUuid':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The entity_schema_no_uuid of this EntitySchemaNoUuid.  # noqa: E501
        :rtype: EntitySchemaNoUuid
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_url(self) -> str:
        """Gets the entity of this EntitySchemaNoUuid.

        An identifier of the entity in the given schema  # noqa: E501

        :return: The entity of this EntitySchemaNoUuid.
        :rtype: str
        """
        return self._name_url

    @name_url.setter
    def name_url(self, name_url: str):
        """Sets the entity of this EntitySchemaNoUuid.

        An identifier of the entity in the given schema  # noqa: E501

        :param entity: The entity of this EntitySchemaNoUuid.
        :type entity: str
        """
        if name_url is None:
            raise ValueError("Invalid value for `name_url`, must not be `None`")  # noqa: E501

        self._name_url = name_url

    @property
    def scheme_url(self) -> str:
        """Gets the scheme of this EntitySchemaNoUuid.

        A naming scheme in which entities are defined  # noqa: E501

        :return: The scheme of this EntitySchemaNoUuid.
        :rtype: str
        """
        return self._scheme_url

    @scheme_url.setter
    def scheme_url(self, scheme_url: str):
        """Sets the scheme of this EntitySchemaNoUuid.

        A naming scheme in which entities are defined  # noqa: E501

        :param scheme: The scheme of this EntitySchemaNoUuid.
        :type scheme: str
        """
        if scheme_url is None:
            raise ValueError("Invalid value for `scheme_url`, must not be `None`")  # noqa: E501

        self._scheme_url = scheme_url

    @property
    def fromtimestamp(self) -> str:
        """Gets the fromtimestamp of this EntitySchemaNoUuid.

        timestamp of the start of validity of the entity name, in ISO 8601 format  # noqa: E501

        :return: The fromtimestamp of this EntitySchemaNoUuid.
        :rtype: str
        """
        return self._fromtimestamp

    @fromtimestamp.setter
    def fromtimestamp(self, fromtimestamp: str):
        """Sets the fromtimestamp of this EntitySchemaNoUuid.

        timestamp of the start of validity of the entity name, in ISO 8601 format  # noqa: E501

        :param fromtimestamp: The fromtimestamp of this EntitySchemaNoUuid.
        :type fromtimestamp: str
        """
        if fromtimestamp is None:
            raise ValueError("Invalid value for `fromtimestamp`, must not be `None`")  # noqa: E501

        self._fromtimestamp = fromtimestamp

    @property
    def totimestamp(self) -> str:
        """Gets the totimestamp of this EntitySchemaNoUuid.

        timestamp of the end of validity of the entity name, in ISO 8601 format. If blank, assumed to be a long way in the future  # noqa: E501

        :return: The totimestamp of this EntitySchemaNoUuid.
        :rtype: str
        """
        return self._totimestamp

    @totimestamp.setter
    def totimestamp(self, totimestamp: str):
        """Sets the totimestamp of this EntitySchemaNoUuid.

        timestamp of the end of validity of the entity name, in ISO 8601 format. If blank, assumed to be a long way in the future  # noqa: E501

        :param totimestamp: The totimestamp of this EntitySchemaNoUuid.
        :type totimestamp: str
        """

        self._totimestamp = totimestamp
